@page "/"

@inject IAmplifierService AmplifierService

<PageTitle>WebAmp</PageTitle>

<MudSwipeArea OnSwipe="@OnSwipe">
	<MudStack>
		<MudPaper Class="pa-3" Elevation="4">
			<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
				<MudIconButton Icon="@Icons.Filled.ChevronLeft" Color="Color.Primary" OnClick="PreviousZone"/>
				<MudText Typo="Typo.h5">@CurrentZone.Name</MudText>
				<MudIconButton Icon="@Icons.Filled.ChevronRight" Color="Color.Primary" OnClick="NextZone"/>
			</MudStack>
		</MudPaper>
		<MudPaper Class="pa-3" Elevation="4">
			<MudStack Class="pa-3">
				<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudStack Row="true">
						<MudIcon Icon="@Icons.Filled.PowerSettingsNew" Color="Color.Primary" />
						<MudText Typo="Typo.body1">Power</MudText>
					</MudStack>
					<MudSwitch @bind-Checked="@CurrentZone.Power" Color="Color.Primary" />
				</MudStack>
				<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudStack Row="true">
						<MudIcon Icon="@Icons.Filled.VolumeOff" Color="Color.Primary" />
						<MudText Typo="Typo.body1">Mute</MudText>
					</MudStack>
					<MudSwitch disabled="@(!CurrentZone.Power)" @bind-Checked="@CurrentZone.Mute" Color="Color.Primary" />
				</MudStack>
				<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
					<MudStack Row="true">
						<MudIcon Icon="@Icons.Filled.LibraryMusic" Color="Color.Primary" />
						<MudText Typo="Typo.body1">Source</MudText>
					</MudStack>
					<MudSelect disabled="@(!CurrentZone.Power)" @bind-Value="@CurrentZone.Source" AnchorOrigin="Origin.BottomCenter" Class="mt-0">
						@foreach (var Current in AmplifierService.Sources.Where(x => x.Enabled))
						{
							<MudSelectItem Value="@Current.ID">@Current.Name</MudSelectItem>
						}
					</MudSelect>
				</MudStack>
			</MudStack>
		</MudPaper>
		<MudPaper Class="pa-3" Elevation="4">
			<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
				<MudIconButton Icon="@Icons.Filled.VolumeDown" disabled="@(!CurrentZone.Power)" Color="Color.Primary" OnClick="VolumeDown"/>
				<MudSlider @bind-Value="@CurrentZone.Volume" disabled="@(!CurrentZone.Power)" Variant="Variant.Filled" Min="0" Max="38" Step="1" Immediate="false"/>
				<MudIconButton Icon="@Icons.Filled.VolumeUp" disabled="@(!CurrentZone.Power)" Color="Color.Primary" OnClick="VolumeUp"/>
			</MudStack>
		</MudPaper>
		<MudExpansionPanels Elevation="4">
			<MudExpansionPanel Text="Audio Settings">
				<MudGrid>
					<MudItem xs="4">
						<MudStack Row="true">
							<MudIcon Icon="@Icons.Filled.Equalizer" Color="Color.Primary" />
							<MudText Typo="Typo.body1">Treble</MudText>
						</MudStack>
					</MudItem>
					<MudItem xs="8">
						<MudSlider @bind-Value="@CurrentZone.Treble" disabled="@(!CurrentZone.Power)" Variant="Variant.Filled" Min="0" Max="14" Step="1" Immediate="false"/>
					</MudItem>
					<MudItem xs="4">
						<MudStack Row="true">
							<MudIcon Icon="@Icons.Filled.Equalizer" Color="Color.Primary" />
							<MudText Typo="Typo.body1">Bass</MudText>
						</MudStack>
					</MudItem>
					<MudItem xs="8">
						<MudSlider @bind-Value="@CurrentZone.Bass" disabled="@(!CurrentZone.Power)" Variant="Variant.Filled" Min="0" Max="14" Step="1" Immediate="false"/>
					</MudItem>
					<MudItem xs="4">
						<MudStack Row="true">
							<MudIcon Icon="@Icons.Filled.AlignHorizontalCenter" Color="Color.Primary" />
							<MudText Typo="Typo.body1">Balance</MudText>
						</MudStack>
					</MudItem>
					<MudItem xs="8">
						<MudSlider @bind-Value="@CurrentZone.Balance" disabled="@(!CurrentZone.Power)" Variant="Variant.Filled" Min="0" Max="14" Step="1" Immediate="false"/>
					</MudItem>
				</MudGrid>
			</MudExpansionPanel>
		</MudExpansionPanels>
	</MudStack>
</MudSwipeArea>

@code
{
	[CascadingParameter]
	public HubConnection AmpHubConnection { get; set; }
	public MPRSGxZ.Hardware.Zone CurrentZone { get; set; }

	protected override void OnInitialized()
	{
		AmpHubConnection.On("SendUpdate", () => { Changed(); });

		var EnabledZones = AmplifierService.Amplifiers.SelectMany(x => x.Zones).Where(x => x.Enabled).ToList();
		CurrentZone = EnabledZones[0];
	}

	public void OnSwipe(SwipeDirection Direction)
	{
		if (Direction == SwipeDirection.LeftToRight)
		{
			PreviousZone();
		}
		else if (Direction == SwipeDirection.RightToLeft)
		{
			NextZone();
		}
	}

	public void Changed()
	{
		StateHasChanged();
	}

	public void PreviousZone()
	{
		var EnabledZones = AmplifierService.Amplifiers.SelectMany(x => x.Zones).Where(x => x.Enabled).ToList();

		if (!EnabledZones.Contains(CurrentZone))
		{
			CurrentZone = EnabledZones[0];
			return;
		}

		if (CurrentZone == EnabledZones.First())
		{
			CurrentZone = EnabledZones.Last();
			return;
		}

		var CurrentIndex = EnabledZones.IndexOf(CurrentZone);
		CurrentZone = EnabledZones[CurrentIndex - 1];
	}

	public void NextZone()
	{
		var EnabledZones = AmplifierService.Amplifiers.SelectMany(x => x.Zones).Where(x => x.Enabled).ToList();

		if (!EnabledZones.Contains(CurrentZone))
		{
			CurrentZone = EnabledZones[0];
			return;
		}

		if (CurrentZone == EnabledZones.Last())
		{
			CurrentZone = EnabledZones.First();
			return;
		}

		var CurrentIndex = EnabledZones.IndexOf(CurrentZone);
		CurrentZone = EnabledZones[CurrentIndex + 1];
	}

	public void VolumeDown()
	{
		CurrentZone.Volume--;
	}

	public void VolumeUp()
	{
		CurrentZone.Volume++;
	}
}